/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PuzzlesRouteImport } from './routes/puzzles'
import { Route as MyhorsesRouteImport } from './routes/myhorses'
import { Route as MarketRouteImport } from './routes/market'
import { Route as LevelsRouteImport } from './routes/levels'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as InstructionsRouteImport } from './routes/instructions'
import { Route as HorsesRouteImport } from './routes/horses'
import { Route as CompetitionsRouteImport } from './routes/competitions'
import { Route as BreedsRouteImport } from './routes/breeds'
import { Route as IndexRouteImport } from './routes/index'

const PuzzlesRoute = PuzzlesRouteImport.update({
  id: '/puzzles',
  path: '/puzzles',
  getParentRoute: () => rootRouteImport,
} as any)
const MyhorsesRoute = MyhorsesRouteImport.update({
  id: '/myhorses',
  path: '/myhorses',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketRoute = MarketRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRouteImport,
} as any)
const LevelsRoute = LevelsRouteImport.update({
  id: '/levels',
  path: '/levels',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructionsRoute = InstructionsRouteImport.update({
  id: '/instructions',
  path: '/instructions',
  getParentRoute: () => rootRouteImport,
} as any)
const HorsesRoute = HorsesRouteImport.update({
  id: '/horses',
  path: '/horses',
  getParentRoute: () => rootRouteImport,
} as any)
const CompetitionsRoute = CompetitionsRouteImport.update({
  id: '/competitions',
  path: '/competitions',
  getParentRoute: () => rootRouteImport,
} as any)
const BreedsRoute = BreedsRouteImport.update({
  id: '/breeds',
  path: '/breeds',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/breeds': typeof BreedsRoute
  '/competitions': typeof CompetitionsRoute
  '/horses': typeof HorsesRoute
  '/instructions': typeof InstructionsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/levels': typeof LevelsRoute
  '/market': typeof MarketRoute
  '/myhorses': typeof MyhorsesRoute
  '/puzzles': typeof PuzzlesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/breeds': typeof BreedsRoute
  '/competitions': typeof CompetitionsRoute
  '/horses': typeof HorsesRoute
  '/instructions': typeof InstructionsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/levels': typeof LevelsRoute
  '/market': typeof MarketRoute
  '/myhorses': typeof MyhorsesRoute
  '/puzzles': typeof PuzzlesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/breeds': typeof BreedsRoute
  '/competitions': typeof CompetitionsRoute
  '/horses': typeof HorsesRoute
  '/instructions': typeof InstructionsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/levels': typeof LevelsRoute
  '/market': typeof MarketRoute
  '/myhorses': typeof MyhorsesRoute
  '/puzzles': typeof PuzzlesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/breeds'
    | '/competitions'
    | '/horses'
    | '/instructions'
    | '/leaderboard'
    | '/levels'
    | '/market'
    | '/myhorses'
    | '/puzzles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/breeds'
    | '/competitions'
    | '/horses'
    | '/instructions'
    | '/leaderboard'
    | '/levels'
    | '/market'
    | '/myhorses'
    | '/puzzles'
  id:
    | '__root__'
    | '/'
    | '/breeds'
    | '/competitions'
    | '/horses'
    | '/instructions'
    | '/leaderboard'
    | '/levels'
    | '/market'
    | '/myhorses'
    | '/puzzles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BreedsRoute: typeof BreedsRoute
  CompetitionsRoute: typeof CompetitionsRoute
  HorsesRoute: typeof HorsesRoute
  InstructionsRoute: typeof InstructionsRoute
  LeaderboardRoute: typeof LeaderboardRoute
  LevelsRoute: typeof LevelsRoute
  MarketRoute: typeof MarketRoute
  MyhorsesRoute: typeof MyhorsesRoute
  PuzzlesRoute: typeof PuzzlesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/puzzles': {
      id: '/puzzles'
      path: '/puzzles'
      fullPath: '/puzzles'
      preLoaderRoute: typeof PuzzlesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/myhorses': {
      id: '/myhorses'
      path: '/myhorses'
      fullPath: '/myhorses'
      preLoaderRoute: typeof MyhorsesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/levels': {
      id: '/levels'
      path: '/levels'
      fullPath: '/levels'
      preLoaderRoute: typeof LevelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructions': {
      id: '/instructions'
      path: '/instructions'
      fullPath: '/instructions'
      preLoaderRoute: typeof InstructionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/horses': {
      id: '/horses'
      path: '/horses'
      fullPath: '/horses'
      preLoaderRoute: typeof HorsesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/competitions': {
      id: '/competitions'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof CompetitionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/breeds': {
      id: '/breeds'
      path: '/breeds'
      fullPath: '/breeds'
      preLoaderRoute: typeof BreedsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BreedsRoute: BreedsRoute,
  CompetitionsRoute: CompetitionsRoute,
  HorsesRoute: HorsesRoute,
  InstructionsRoute: InstructionsRoute,
  LeaderboardRoute: LeaderboardRoute,
  LevelsRoute: LevelsRoute,
  MarketRoute: MarketRoute,
  MyhorsesRoute: MyhorsesRoute,
  PuzzlesRoute: PuzzlesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
